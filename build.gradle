plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com.pororo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation "com.redis.testcontainers:testcontainers-redis-junit:1.6.4"

    testImplementation 'com.tngtech.archunit:archunit:1.+'
}

jacoco {
    toolVersion "0.8.13"
}

tasks.jacocoTestReport{
    reports {
        xml.required = true
        html.required = true
        csv.required = true

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.named('test') {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS" // Class별 검사

            // Line의 CoveredRatio를 통해 테스트 성공 비율을 정함
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.1)
            }

            // Class는 100줄이상의 코드를 가질 수 없도록 제한
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(100)
            }

            excludes = List.of(
                    "*.controller.*",
                    "com.pororo.testcode01.Testcode01Application",
                    "com.pororo.testcode01.MyCalculatorApplication"
            )
        }
    }
}

spotless {
    java {
        googleJavaFormat() // 구글 java 포멧 사용

        removeUnusedImports() // 사용하지 않는 import문 제거
        trimTrailingWhitespace() // 불필요한 공백 제거
        indentWithSpaces(4) // 들여쓰기를 띄워쓰기로 바꿔줌
        endWithNewline() // 마지막 줄 공백
    }
}

tasks.register('addGitPrecommitHook', Copy) {
    from 'script/pre-commit'
    into '.git/hooks'
}